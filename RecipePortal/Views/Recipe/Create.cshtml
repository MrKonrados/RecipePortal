@model RecipePortal.ViewModels.RecipeViewModel

<h2>New Recipe</h2>

@using (Html.BeginForm("Create", "Recipe", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "Please check errors", new { @class = "alert alert-danger", @role = "alert" })

    <div class="form-group @(!ViewData.ModelState.IsValid ? "has-error" : "")">
        @Html.LabelFor(r => r.Name, new { @class = "control-label" })
        @Html.TextBoxFor(r => r.Name, new { @class = "form-control" })
        @Html.ValidationMessageFor(r => r.Name, "", new { @class = "text-danger" })
    </div>

    @*      <div class="form-group @(!ViewData.ModelState.IsValid ? "has-error" : "")"> *@
    @*          @Html.LabelFor(r => r.File, new { @class = "control-label" }) *@
    @*          @Html.TextBoxFor(r => r.File, new { @class = "form-control", type="file" }) *@
    @*          @Html.ValidationMessageFor(r => r.File, "", new { @class = "text-danger" }) *@
    @*      </div> *@

           <div class="form-group @(!ViewData.ModelState.IsValid ? "has-error" : "")"> 
                @Html.Label("Upload file", new { @class = "control-label" }) 
                
               <input type="file" name="file" required />
                @* @Html.ValidationMessageFor(r => r.File, "", new { @class = "text-danger" })  *@
         </div> 


    <div class="form-group @(!ViewData.ModelState.IsValid ? "has-error" : "")">
        @Html.LabelFor(r => r.Directions, new { @class = "control-label" })
        @Html.TextBoxFor(r => r.Directions, new { @class = "form-control" })
        @Html.ValidationMessageFor(r => r.Directions, "", new { @class = "text-danger" })
    </div>

    <button type="submit" class="btn btn-default">Submit</button>
}

